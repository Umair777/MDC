head	1.22;
access;
symbols;
locks
	anmolzehra:1.22; strict;
comment	@ * @;


1.22
date	2017.07.14.11.16.25;	author anmolzehra;	state Exp;
branches;
next	1.21;

1.21
date	2017.07.13.10.23.32;	author anmolzehra;	state Exp;
branches;
next	1.20;

1.20
date	2017.07.13.10.19.33;	author anmolzehra;	state Exp;
branches;
next	1.19;

1.19
date	2017.07.13.10.08.22;	author anmolzehra;	state Exp;
branches;
next	1.18;

1.18
date	2017.07.10.10.23.29;	author anmolzehra;	state Exp;
branches;
next	1.17;

1.17
date	2017.07.10.10.14.55;	author anmolzehra;	state Exp;
branches;
next	1.16;

1.16
date	2017.07.10.09.36.50;	author anmolzehra;	state Exp;
branches;
next	1.15;

1.15
date	2017.07.07.17.42.42;	author anmolzehra;	state Exp;
branches;
next	1.14;

1.14
date	2017.07.07.13.09.34;	author anmolzehra;	state Exp;
branches;
next	1.13;

1.13
date	2017.07.07.13.02.17;	author anmolzehra;	state Exp;
branches;
next	1.12;

1.12
date	2017.07.07.13.00.57;	author anmolzehra;	state Exp;
branches;
next	1.11;

1.11
date	2017.07.07.11.05.26;	author anmolzehra;	state Exp;
branches;
next	1.10;

1.10
date	2017.07.06.10.51.18;	author anmolzehra;	state Exp;
branches;
next	1.9;

1.9
date	2017.07.06.09.52.09;	author anmolzehra;	state Exp;
branches;
next	1.8;

1.8
date	2017.07.05.13.51.01;	author anmolzehra;	state Exp;
branches;
next	1.7;

1.7
date	2017.07.05.09.17.08;	author anmolzehra;	state Exp;
branches;
next	1.6;

1.6
date	2017.07.05.09.14.51;	author anmolzehra;	state Exp;
branches;
next	1.5;

1.5
date	2017.07.04.11.12.35;	author anmolzehra;	state Exp;
branches;
next	1.4;

1.4
date	2017.07.04.11.07.24;	author anmolzehra;	state Exp;
branches;
next	1.3;

1.3
date	2017.07.04.10.18.35;	author anmolzehra;	state Exp;
branches;
next	1.2;

1.2
date	2017.07.04.03.51.44;	author anmolzehra;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.03.11.11.51;	author anmolzehra;	state Exp;
branches;
next	;


desc
@@


1.22
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declarations.h"
int compression()
{
	int fd,ndc,cl;
	char *ma;
	printf("%s:Begin\n",__func__);
	fd=openfile("O_RDONLY");
	printf("File descriptor is:%d\n",fd);
	ma = createMasterarray(fd);
	ndc=strlen(ma);
	cl=codelength(ndc);
	printf("No. of distinct characters are:%d\n",ndc);
	printf("Codelength is:%d\n",cl);
	lseek(fd,0,SEEK_SET);
	switch(cl)
	{
		case 2:
			{
				compress2(fd,ma);
				break;
			}

		case 3:
			{
				compress3(fd,ma);
				break;
			}

		case 4:
			{
				compress4(fd,ma);
				break;
			}

		case 5:
			{
				compress5(fd,ma);
				break;
			}

		case 6:
			{
				compress6(fd,ma);
				break;
			}

		case 7:
			{
				compress7(fd,ma);
				break;
			}
	}
	printf("%s:Ends\n",__func__);
	close(fd);
}

@


1.21
log
@*** empty log message ***
@
text
@d55 1
a55 1
	return fd;
@


1.20
log
@*** empty log message ***
@
text
@d32 1
a32 1
				compress4(def,ma);
@


1.19
log
@*** empty log message ***
@
text
@d5 1
a5 1
	int fd,ndc,cl,def;
a9 1
	def=openfile("O_WRONLY");
a10 1
	write(def,ma,strlen(ma));
d42 5
a46 5
			//	case 6:
			//	{
			//		compress6(fd,ma);
			//		break;
			//	}
d48 5
a52 5
			//	case 7:
			//	{
			//		compress7(fd,ma);
			//		break;
			//	}
@


1.18
log
@*** empty log message ***
@
text
@d5 1
a5 1
	int fd,ndc,cl;
a7 1
//	fd=open("MyFile",O_RDONLY);
d10 1
d12 1
d34 1
a34 1
				compress4(fd,ma);
@


1.17
log
@*** empty log message ***
@
text
@d8 2
a9 1
	fd=open("MyFile",O_RDONLY);
@


1.16
log
@*** empty log message ***
@
text
@d8 1
a8 1
	fd=openfile("O_RDONLY");
@


1.15
log
@*** empty log message ***
@
text
@d8 1
a8 6
	fd=open("MyFile",O_RDONLY);
	if(fd==-1)
	{
		perror("open");
		exit(EXIT_FAILURE);
	}
@


1.14
log
@*** empty log message ***
@
text
@d8 1
a8 1
	fd=openfile("O_RDONLY");
@


1.13
log
@.if(*(ma+i)==*(ma+j))
{
flag=1;
@
text
@d7 2
a8 1
	fd=open("MyFile",O_RDONLY);
a14 1
	printf("%s:Begin\n",__func__);
a19 1
	printf("%s:Ends\n",__func__);
d59 1
@


1.12
log
@*** empty log message ***
@
text
@d21 1
@


1.11
log
@*** empty log message ***
@
text
@d59 1
@


1.10
log
@*** empty log message ***
@
text
@d5 4
a8 19
int fd,ndc,cl;
char *ma;
fd=open("MyFile",O_RDONLY);
if(fd==-1)
{
perror("open");
exit(EXIT_FAILURE);
}
printf("File descriptor is:%d\n",fd);
printf("%s:Begin\n",__func__);
ma = createMasterarray(fd);
ndc=strlen(ma);
cl=codelength(ndc);
printf("No. of distinct characters are:%d\n",ndc);
printf("Codelength is:%d\n",cl);
printf("%s:Ends\n",__func__);
switch(cl)
{
	case 2:
d10 2
a11 2
		compress2(fd,ma);
		break;
d13 15
d29 5
a33 5
	case 3:
	{
		compress3(fd,ma);
		break;
	}
d35 5
a39 5
	case 4:
	{
		compress4(fd,ma);
		break;
	}
d41 5
a45 5
	case 5:
	{
		compress5(fd,ma);
		break;
	}
d47 5
a51 5
//	case 6:
//	{
//		compress6(fd,ma);
//		break;
//	}
d53 6
a58 6
//	case 7:
//	{
//		compress7(fd,ma);
//		break;
//	}
}
@


1.9
log
@*** empty log message ***
@
text
@d47 5
a51 5
	case 6:
	{
		compress6(fd,ma);
		break;
	}
d53 5
a57 5
	case 7:
	{
		compress7(fd,ma);
		break;
	}
@


1.8
log
@*** empty log message ***
@
text
@d43 1
a43 1
		compress5(fd.ma);
@


1.7
log
@*** empty log message ***
@
text
@d8 5
d21 38
@


1.6
log
@*** empty log message ***
@
text
@d13 2
a14 2
printf("No. of distinct characters are:%d",ndc);
printf("Codelength is:%d",cl);
@


1.5
log
@*** empty log message ***
@
text
@d5 1
a5 1
int fd,ndc;
d12 1
d14 1
@


1.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
int fd;
d11 2
@


1.3
log
@*** empty log message ***
@
text
@d10 1
a10 1
ma= createMasterarray(fd);
@


1.2
log
@unique characters were found.
@
text
@d5 1
a5 1
int fd,i,j,flag;
a6 6
ma=(char *)malloc(sizeof(char)*150);
if(!ma)
{
perror("malloc");
exit(EXIT_FAILURE);
}
d10 1
a10 23
i=0;
flag=0;
while(1)
{
read(fd,(ma+i),1);
if(*(ma+i)==10)
{
break;
}
for(j=0;j<i;j++)
{
if(*(ma+i)==*(ma+j))
{
flag=1;
}
}
if(flag==0)
{
printf("%c",*(ma+i));
i++;
} 
flag=0;
}
@


1.1
log
@Initial revision
@
text
@d2 1
d15 1
a15 1
printf("Compression Begins\n");
d39 1
@
