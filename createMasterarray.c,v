head	1.15;
access;
symbols;
locks
	anmolzehra:1.15; strict;
comment	@ * @;


1.15
date	2017.07.13.11.55.26;	author anmolzehra;	state Exp;
branches;
next	1.14;

1.14
date	2017.07.13.11.36.18;	author anmolzehra;	state Exp;
branches;
next	1.13;

1.13
date	2017.07.13.11.29.35;	author anmolzehra;	state Exp;
branches;
next	1.12;

1.12
date	2017.07.13.11.27.53;	author anmolzehra;	state Exp;
branches;
next	1.11;

1.11
date	2017.07.13.11.26.27;	author anmolzehra;	state Exp;
branches;
next	1.10;

1.10
date	2017.07.13.11.25.32;	author anmolzehra;	state Exp;
branches;
next	1.9;

1.9
date	2017.07.13.11.20.17;	author anmolzehra;	state Exp;
branches;
next	1.8;

1.8
date	2017.07.13.11.09.09;	author anmolzehra;	state Exp;
branches;
next	1.7;

1.7
date	2017.07.07.13.09.34;	author anmolzehra;	state Exp;
branches;
next	1.6;

1.6
date	2017.07.04.11.07.28;	author anmolzehra;	state Exp;
branches;
next	1.5;

1.5
date	2017.07.04.10.44.24;	author anmolzehra;	state Exp;
branches;
next	1.4;

1.4
date	2017.07.04.10.41.34;	author anmolzehra;	state Exp;
branches;
next	1.3;

1.3
date	2017.07.04.10.33.17;	author anmolzehra;	state Exp;
branches;
next	1.2;

1.2
date	2017.07.04.10.08.46;	author anmolzehra;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.04.03.54.37;	author anmolzehra;	state Exp;
branches;
next	;


desc
@@


1.15
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declarations.h"
char * createMasterarray(int fd)
{
	int i,j,flag;
	char *ma;
	printf("%s:Begins\n",__func__);
	i=0;
	flag=0;
	ma=(char *)malloc(sizeof(char)*128);
	if(!ma)
	{
		perror("malloc");
		exit(EXIT_FAILURE);
	}
	while(1)
	{
		if(read(fd,(ma+i),1)==0)
		{
			break;
		}
		
		for(j=0;j<i;j++)
		{
			if(*(ma+i)==*(ma+j))
			{
				flag=1;
				break;
			}
		}
		if(flag==0)
		{
			printf("%c",*(ma+i));
			i++;
		}
		flag=0;
	}
	*(ma+i)='\0';
	printf("%s:Ends\n",__func__);
	return ma;
}

@


1.14
log
@*** empty log message ***
@
text
@d10 6
a15 1
	ma=NULL;
d18 1
a18 2
		read(fd,(ma+i),1);
		if(*(ma+i)==10)
d22 1
a22 2
		if(i>0)
		{
d28 1
a30 1
		}
a32 1
			ma=(char *)realloc(ma,i+1);
a38 1
	ma=(char *)realloc(ma,i+1);
@


1.13
log
@*** empty log message ***
@
text
@d37 1
@


1.12
log
@*** empty log message ***
@
text
@a36 3

	ma=(char *)realloc(ma,i+1);

@


1.11
log
@*** empty log message ***
@
text
@a6 6
	ma=(char *)malloc(sizeof(char)*128);
	if(!ma)
	{
		perror("malloc");
		exit(EXIT_FAILURE);
	}
@


1.10
log
@*** empty log message ***
@
text
@a36 1
			*(ma+i)=ch;
@


1.9
log
@*** empty log message ***
@
text
@d37 1
a37 5
			if(!ma)
			{
				perror("realloc");
				exit(EXIT_FAILURE);
			}
d46 1
a46 5
	if(!ma)
	{
		perror("realloc");
		exit(EXIT_FAILURE);
	}
@


1.8
log
@*** empty log message ***
@
text
@d24 2
d33 1
d48 7
@


1.7
log
@*** empty log message ***
@
text
@d16 1
d33 6
@


1.6
log
@*** empty log message ***
@
text
@d5 35
a39 35
int i,j,flag;
char *ma;
ma=(char *)malloc(sizeof(char)*128);
if(!ma)
{
perror("malloc");
exit(EXIT_FAILURE);
}
printf("%s:Begins\n",__func__);
i=0;
flag=0;
while(1)
{
read(fd,(ma+i),1);
if(*(ma+i)==10)
{
break;
}
for(j=0;j<i;j++)
{
if(*(ma+i)==*(ma+j))
{
flag=1;
}
}
if(flag==0)
{
printf("%c",*(ma+i));
i++;
}
flag=0;
}
*(ma+i)='\0';
printf("%s:Ends\n",__func__);
return ma;
@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
char* createMasterarrayint(int fd)
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
char* createMasterarrayint(int )
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
char* createMasterarray()
d5 1
a5 1
int fd,i,j,flag;
d38 1
a39 1
printf("%s:Ends\n",__func__);
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
ma=(char *)malloc(sizeof(char)*150);
a12 2
fd=open("MyFile",O_RDONLY);
printf("File descriptor is:%d\n",fd);
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
printf("Compression Begins\n");
d39 3
d43 1
a43 1
}
@
